name: Release & Deploy

on:
    release:
        types: [published]

jobs:
    # Consolidated deploy job: build, lint, test, and deploy in a single job
    deploy:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Build Docker environment
              run: docker compose build roblox-ts-dev

            - name: Run linting
              run: docker compose run --rm roblox-ts-dev npm run lint

            - name: Build project
              run: |
                  echo "üî® Building project..."
                  docker compose run --rm roblox-ts-dev npm run build

            # Always run comprehensive cloud tests before deployment
            - name: Run comprehensive cloud tests before deployment
              env:
                  ROBLOX_API_KEY: ${{ secrets.ROBLOX_API_KEY }}
                  ROBLOX_UNIVERSE_ID: ${{ secrets.ROBLOX_TEST_UNIVERSE_ID }}
                  ROBLOX_PLACE_ID: ${{ secrets.ROBLOX_TEST_PLACE_ID }}
              run: |
                  echo "üß™ Running comprehensive cloud tests before deployment..."
                  echo "üéØ Using real Roblox environment for maximum deployment confidence"
                  echo "Debug: Environment variables:"
                  echo "ROBLOX_API_KEY: ${ROBLOX_API_KEY:+[SET]} ${ROBLOX_API_KEY:-[NOT SET]}"
                  echo "ROBLOX_UNIVERSE_ID: ${ROBLOX_UNIVERSE_ID:+[SET]} ${ROBLOX_UNIVERSE_ID:-[NOT SET]}"
                  echo "ROBLOX_PLACE_ID: ${ROBLOX_PLACE_ID:+[SET]} ${ROBLOX_PLACE_ID:-[NOT SET]}"

                  # Run comprehensive cloud tests using test:shell for maximum accuracy
                  if docker compose run --rm \
                    -e ROBLOX_API_KEY="$ROBLOX_API_KEY" \
                    -e ROBLOX_UNIVERSE_ID="$ROBLOX_UNIVERSE_ID" \
                    -e ROBLOX_PLACE_ID="$ROBLOX_PLACE_ID" \
                    roblox-ts-dev npm run test:shell; then
                      echo "‚úÖ All cloud tests passed - deployment is safe to proceed"
                      echo "üéâ Code validated against real Roblox APIs and environment"
                  else
                      echo "‚ùå Cloud tests failed - aborting deployment for safety"
                      echo "üõë Fix failing tests before attempting deployment"
                      exit 1
                  fi

            # Deploy to test environment for prereleases
            - name: Deploy to Test Environment (Prerelease)
              if: ${{ github.event.release.prerelease }}
              env:
                  ROBLOX_API_KEY: ${{ secrets.ROBLOX_API_KEY }}
                  ROBLOX_UNIVERSE_ID: ${{ secrets.ROBLOX_TEST_UNIVERSE_ID }}
                  ROBLOX_PLACE_ID: ${{ secrets.ROBLOX_TEST_PLACE_ID }}
              run: |
                  echo "üß™ Deploying prerelease ${{ github.event.release.tag_name }} to TEST environment"

                  # Deploy using Docker environment with environment variables passed directly
                  if docker compose run --rm \
                    -e ROBLOX_API_KEY="$ROBLOX_API_KEY" \
                    -e ROBLOX_UNIVERSE_ID="$ROBLOX_UNIVERSE_ID" \
                    -e ROBLOX_PLACE_ID="$ROBLOX_PLACE_ID" \
                    roblox-ts-dev ./scripts/shell/publish.sh; then
                      echo "‚úÖ Successfully deployed prerelease to test environment!"
                      echo "üîó Test at: https://www.roblox.com/games/$ROBLOX_PLACE_ID"
                  else
                      echo "‚ùå Deployment to test environment failed"
                      exit 1
                  fi

            # Deploy to production environment for full releases
            - name: Deploy to Production Environment (Release)
              if: ${{ !github.event.release.prerelease }}
              env:
                  ROBLOX_API_KEY: ${{ secrets.ROBLOX_API_KEY }}
                  ROBLOX_UNIVERSE_ID: ${{ secrets.ROBLOX_PRODUCTION_UNIVERSE_ID }}
                  ROBLOX_PLACE_ID: ${{ secrets.ROBLOX_PRODUCTION_PLACE_ID }}
              run: |
                  echo "üöÄ Deploying release ${{ github.event.release.tag_name }} to PRODUCTION environment"

                  # Deploy using Docker environment with environment variables passed directly
                  if docker compose run --rm \
                    -e ROBLOX_API_KEY="$ROBLOX_API_KEY" \
                    -e ROBLOX_UNIVERSE_ID="$ROBLOX_UNIVERSE_ID" \
                    -e ROBLOX_PLACE_ID="$ROBLOX_PLACE_ID" \
                    roblox-ts-dev ./scripts/shell/publish.sh; then
                      echo "‚úÖ Successfully deployed release to production environment!"
                      echo "üéâ Live at: https://www.roblox.com/games/$ROBLOX_PLACE_ID"
                  else
                      echo "‚ùå Deployment to production environment failed"
                      exit 1
                  fi

            # Post-deployment verification for production releases
            - name: Post-deployment verification (Production)
              if: ${{ !github.event.release.prerelease }}
              env:
                  ROBLOX_API_KEY: ${{ secrets.ROBLOX_API_KEY }}
                  ROBLOX_UNIVERSE_ID: ${{ secrets.ROBLOX_PRODUCTION_UNIVERSE_ID }}
                  ROBLOX_PLACE_ID: ${{ secrets.ROBLOX_PRODUCTION_PLACE_ID }}
              run: |
                  echo "üîç Running post-deployment verification on production..."
                  echo "üéØ Verifying deployment against live production environment"

                  # Run comprehensive verification tests against production environment
                  echo "üß™ Running cloud verification tests against production"
                  if docker compose run --rm \
                    -e ROBLOX_API_KEY="$ROBLOX_API_KEY" \
                    -e ROBLOX_UNIVERSE_ID="$ROBLOX_UNIVERSE_ID" \
                    -e ROBLOX_PLACE_ID="$ROBLOX_PLACE_ID" \
                    roblox-ts-dev npm run test:shell; then
                      echo "‚úÖ Production deployment verified successfully!"
                      echo "üéâ All systems operational in production environment"
                  else
                      echo "‚ö†Ô∏è  Post-deployment verification found issues"
                      echo "üîç Check production logs and consider immediate remediation"
                      # Don't fail the deployment, but warn about issues
                      exit 0
                  fi

                  echo "‚úÖ Post-deployment verification completed!"

    # Create deployment status and notifications
    notify:
        needs: deploy
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Notify Success
              if: ${{ needs.deploy.result == 'success' }}
              run: |
                  if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
                      echo "üß™ Prerelease ${{ github.event.release.tag_name }} deployed to TEST environment"
                      echo "üîó Test at: https://www.roblox.com/games/${{ secrets.ROBLOX_TEST_PLACE_ID }}"
                  else
                      echo "üöÄ Release ${{ github.event.release.tag_name }} deployed to PRODUCTION environment"
                      echo "üéâ Live at: https://www.roblox.com/games/${{ secrets.ROBLOX_PRODUCTION_PLACE_ID }}"
                  fi

            - name: Notify Failure
              if: ${{ needs.deploy.result == 'failure' }}
              run: |
                  echo "‚ùå Deployment failed for ${{ github.event.release.tag_name }}"
                  echo "üîç Check the Actions logs for details"
                  exit 1
