-- Tower Defense Network Definitions

-- Enums
enum TowerType = { BasicTower, ArcherTower, MageTower, CannonTower }
enum EnemyType = { BasicEnemy, FastEnemy, TankEnemy, FlyingEnemy }

-- Structs for game objects and data
struct Tower {
    id: string,
    towerType: TowerType,
    position: vector,
    level: u8,
    damage: f32,
    range: f32,
    attackSpeed: f32,
    playerId: string,
}

struct Enemy {
    id: string,
    enemyType: EnemyType,
    position: vector,
    health: f32,
    maxHealth: f32,
    speed: f32,
    pathProgress: f32,
}

struct Projectile {
    id: string,
    position: vector,
    targetPosition: vector,
    damage: f32,
    speed: f32,
}

struct GameState {
    currentWave: u16,
    isWaveActive: boolean,
    enemiesRemaining: u16,
    playerGold: i32,
    playerLives: i16,
}

struct PathPoint {
    position: vector,
    nextIndex: u32?,
}

struct EnemyDeathData {
    enemyId: string,
    goldReward: i32,
}

struct EnemyReachedEndData {
	enemyId: string,
}

struct EnemyUpdateData {
    id: string,
    position: vector,
    health: f32,
}

struct PlaceTowerData {
    position: vector,
    towerType: TowerType,
}

struct TowerIdData {
    towerId: string,
}

event EnemyReachedEnd {
	From: Server,
	Type: Reliable,
	Call: ManyAsync,
	Data: EnemyReachedEndData
}

-- --- Client to Server Events ---

-- Request to place a tower
event PlaceTowerRequest {
    From: Client,
    Type: Reliable,
    Call: SingleSync,
    Data: PlaceTowerData,
}

-- Request to upgrade a tower
event UpgradeTowerRequest {
    From: Client,
    Type: Reliable,
    Call: SingleSync,
    Data: TowerIdData,
}

-- Request to sell a tower
event SellTowerRequest {
    From: Client,
    Type: Reliable,
    Call: SingleSync,
    Data: TowerIdData,
}

-- Request to start the next wave
event StartWaveRequest {
    From: Client,
    Type: Reliable,
    Call: SingleSync,
}


-- --- Server to Client Events ---

-- Notifies clients that a tower has been placed
event TowerPlaced {
    From: Server,
    Type: Reliable,
    Call: ManySync,
    Data: Tower,
}

-- Notifies clients that an enemy has spawned
event EnemySpawned {
    From: Server,
    Type: Reliable,
    Call: ManySync,
    Data: Enemy,
}

-- Notifies clients that an enemy's state has been updated
event EnemyUpdated {
    From: Server,
    Type: Unreliable,
    Call: ManySync,
    Data: EnemyUpdateData,
}

-- Notifies clients that an enemy has died
event EnemyDied {
    From: Server,
    Type: Reliable,
    Call: ManySync,
    Data: EnemyDeathData,
}

-- Notifies clients that a projectile has been created
event ProjectileCreated {
    From: Server,
    Type: Unreliable,
    Call: ManySync,
    Data: Projectile,
}

-- Notifies clients of the current game state
event GameStateUpdated {
    From: Server,
    Type: Reliable,
    Call: ManySync,
    Data: GameState,
}

-- Sends the path data to clients
event PathDataSent {
    From: Server,
    Type: Reliable,
    Call: SingleAsync,
    Data: PathPoint[],
}
